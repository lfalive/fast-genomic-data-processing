/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2016-2021 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/* DO NOT EDIT THIS FILE - it is machine generated */

/* Header for class com_intel_gkl_pairhmm_IntelPairHmm */

#ifndef _Included_com_intel_gkl_pairhmm_IntelPairHmm
#define _Included_com_intel_gkl_pairhmm_IntelPairHmm
//#ifdef __cplusplus
//extern "C" {
//#endif

#include <vector>
#include "pairhmm_common.h"

void initNative(bool use_double, int max_threads);

void computeLikelihoodsNative(std::vector<testcase> &testcases, std::vector<double> &likelihoodArray);

void computeLikelihoodsNative_concurrent(std::vector<testcase> &testcases, std::vector<double> &likelihoodArray);

void computeLikelihoodsNative_concurrent_i(std::vector<testcase> &testcases, std::vector<double> &likelihoodArray,
                                           unsigned long i);

void computeLikelihoodsNative_concurrent_trie(std::vector<trie_testcase> &testcases,
                                                  std::vector<std::vector<double>> &likelihoodArray);

void computeLikelihoodsNative_concurrent_trie_i(std::vector<trie_testcase> &testcases,
                                                    std::vector<std::vector<double>> &likelihoodArray, unsigned long i);

void test_compute(std::vector<testcase> *testcases, std::vector<double> *likelihoodArray, unsigned long i);

float compute_full_prob_float(testcase *tc);

double compute_full_prob_double(testcase *tc);

double compute_full_prob_Fixed64(testcase *tc);

//#ifdef __cplusplus
//}
//#endif
#endif
